@page "/"
@using BlazorSelect2.Data
@using BlazorSelect2.Common
@using Newtonsoft.Json

<PageTitle>Home</PageTitle>
<div class="card">
    <EditForm Model="@Place" FormName="PalceAdd" OnValidSubmit="OnValidSubmitPlace">
    <div class="card-body user-select-none pb-1">
        <div class="row">
            <h5 class="card-title fw-bold">Basic Usage</h5>
            <p class="card-subtitle text-body-secondary">
                case example in the create, edit, delete form
            </p>
        </div>
    </div>
    </EditForm>

    <div class="card-body">

        <div class="row">
            <div class="col-3">
                <div class="mb-3">
                    <label class="form-label"> Country </label>
                    <DropdownSelect @bind-Value="Place.CountryId" EventDropdown="OnCountry"
                                    DataSource="DropdownCountry"
                                    EmptyText="false"
                                    Css="form-select form-select-sm"/>

                </div>
                <div class="mb-3">
                    <label class="form-label"> City </label>
                    <DropdownSelect @bind-Value="Place.CityId"
                                    DataSource="DropdownCity"
                                    EmptyText="false"
                                    Css="form-select form-select-sm"/>

                </div>
            </div>
            <div class="col-3">
                <div class="mb-3">
                    <label class="form-label"> Category </label>
                    <DropdownSelect @bind-Value="Place.Category" EventDropdown="SetCategory"
                                    DataSource="DropdownPlaceCategory"
                                    EmptyText="false"
                                    Css="form-select form-select-sm"/>

                </div>
                <div class="mb-3">
                    <label class="form-label"> Type </label>
                    <DropdownMultiple @bind-Value="Place.TypesArray" EventDropdown="SetTypes"
                                      DataSource="DropdownPlaceType"
                                      EmptyText="false"
                                      Css="form-select form-select-sm"/>

                </div>
            </div>
            <div class="col-6">
                <code>
                    @(JsonConvert.SerializeObject(Place))
                </code>
            </div>
        </div>
    </div>
</div>

<Filter></Filter>

@code
{
    [SupplyParameterFromForm] private TbPlace Place { get; set; } = new();

    private Dictionary<string, string> DropdownCountry { get; set; } = new();
    private Dictionary<string, string> DropdownCity { get; set; } = new();
    private Dictionary<string, string> DropdownPlaceCategory { get; set; } = new();
    private Dictionary<string, string> DropdownPlaceType { get; set; } = new();

    [Inject] protected internal MasterDataService Data { get; set; }

    protected override void OnInitialized()
    {
        DropdownPlaceCategory = Data.DropdownPlaceCategory();
        DropdownPlaceType = Data.DropdownPlaceType();
        DropdownCountry = Data.DropdownCountry();
        DropdownCity = Data.DropdownCityGetIso("ID");

        Place.Category = PlaceCategory.Hotel;
        Place.TypesArray = new[] { "Room" };
        Place.Types = string.Join(",", Place.TypesArray);
        Place.Name = $"Hotel-Test";
        Place.CountryId = DropdownCountry.First().Key;
        Place.CityId = DropdownCity.First().Key;
        Place.Name = $"Hotel-Test";

        base.OnInitialized();
    }

    private async void OnCountry(string countryId)
    {
        DropdownCity = Data.DropdownCityGetIso(countryId);
        Place.CityId = DropdownCity.First().Key;
        Place.CountryId = countryId;

        await InvokeAsync(StateHasChanged);
    }

    private void SetCategory(string value)
    {
        Place.Category = value.ToEnum<PlaceCategory>();
        StateHasChanged();
    }
    private void SetTypes(string[] value)
    {
        Place.Types = string.Join(",", value);
        Place.TypesArray = value;
        StateHasChanged();
    }


    private async Task OnValidSubmitPlace()
    {
        // var result = await Mediator.Send(Place).ConfigureAwait(true);
        // if (result.Succeeded)
        // {

        //     Toast.ShowSuccess($"{ConstantString.CreateSuccess}");
        //     await InvokeAsync(StateHasChanged);
        //     NavigationManager.NavigateTo($"Place/Id/{result.Data}");
        // }
    }
}
